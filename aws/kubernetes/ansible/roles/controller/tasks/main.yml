---
# Copy the controllers certificates
- name: Copy the certificates to the controllers
  copy: src={{ kube_dir }}/certs/{{ item }} dest=./
  with_items:
    - ca.pem
    - ca-key.pem
    - kubernetes-key.pem
    - kubernetes.pem
    - service-account-key.pem
    - service-account.pem
    - encryption-config.yaml
# Copy the configuration files
- name: Copy the configuration files to the controllers
  copy: src={{ kube_dir }}/config/{{ item }} dest=./
  with_items:
    - admin.kubeconfig
    - kube-controller-manager.kubeconfig
    - kube-scheduler.kubeconfig
# Start the etcd daemons
- name: Download etcd distribution
  unarchive:
    src: https://github.com/etcd-io/etcd/releases/download/v3.4.10/etcd-v3.4.10-linux-amd64.tar.gz
    dest: ./
    remote_src: yes
- name: Copy etcd binary to /usr/local/bin 
  copy:
    src: ./etcd-v3.4.10-linux-amd64/etcd 
    dest: /usr/local/bin
    remote_src: yes
    mode: u+rwx,g-w+x,o-w+x
- name: Copy etcdctl binary to /usr/local/bin 
  copy:
    src: ./etcd-v3.4.10-linux-amd64/etcdctl 
    dest: /usr/local/bin
    remote_src: yes
    mode: u+rwx,g-w+x,o-w+x
- name: Create directory /etc/etcd
  file:
    path: /etc/etcd
    state: directory
    mode: '0755'
- name: Create directory /var/lib/etcd
  file:
    path: /var/lib/etcd
    state: directory
    mode: '0700'
- name: Copy the certificates for etcd
  copy: 
    src: "{{ item }}" 
    dest: /etc/etcd
    remote_src: yes
  with_items:
    - ca.pem
    - kubernetes-key.pem
    - kubernetes.pem
- name: Configure the etcd configuration file with the local IP
  shell: |
    INTERNAL_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
    ETCD_NAME=$(hostname -s)
    cat <<EOF | sudo tee /etc/systemd/system/etcd.service
    [Unit]
    Description=etcd
    Documentation=https://github.com/coreos

    [Service]
    Type=notify
    ExecStart=/usr/local/bin/etcd \
      --name ${ETCD_NAME} \
      --cert-file=/etc/etcd/kubernetes.pem \
      --key-file=/etc/etcd/kubernetes-key.pem \
      --peer-cert-file=/etc/etcd/kubernetes.pem \
      --peer-key-file=/etc/etcd/kubernetes-key.pem \
      --trusted-ca-file=/etc/etcd/ca.pem \
      --peer-trusted-ca-file=/etc/etcd/ca.pem \
      --peer-client-cert-auth \
      --client-cert-auth \
      --initial-advertise-peer-urls https://${INTERNAL_IP}:2380 \
      --listen-peer-urls https://${INTERNAL_IP}:2380 \
      --listen-client-urls https://${INTERNAL_IP}:2379,https://127.0.0.1:2379 \
      --advertise-client-urls https://${INTERNAL_IP}:2379 \
      --initial-cluster-token etcd-cluster-0 \
      --initial-cluster controller-0=https://10.240.0.10:2380,controller-1=https://10.240.0.11:2380,controller-2=https://10.240.0.12:2380 \
      --initial-cluster-state new \
      --data-dir=/var/lib/etcd
    Restart=on-failure
    RestartSec=5

    [Install]
    WantedBy=multi-user.target
    EOF
- name: Reload the daemons configuration files
  systemd:
    daemon_reload: yes
- name: Enable etcd 
  systemd:
    name: etcd 
    enabled: yes
    masked: no
- name: Start etcd 
  systemd:
    name: etcd 
    state: started
# Starting Control Plane
- name: Create directory /etc/kubernetes/config
  file:
    path: /etc/kubernetes/config
    state: directory
    mode: '0755'
- name: Download the kube-apiserver binary
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kube-apiserver
    dest: "/usr/local/bin"
    force_basic_auth: yes
    mode: u+rwx,g-w+x,o-w+x
- name: Download the kube-controller-manager binary
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kube-controller-manager
    dest: "/usr/local/bin"
    force_basic_auth: yes
    mode: u+rwx,g-w+x,o-w+x
- name: Download the kube-scheduler binary
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kube-scheduler
    dest: "/usr/local/bin"
    force_basic_auth: yes
    mode: u+rwx,g-w+x,o-w+x
- name: Download the kubectl binary
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kubectl
    dest: "/usr/local/bin"
    force_basic_auth: yes
    mode: u+rwx,g-w+x,o-w+x
- name: Create directory /var/lib/kubernetes
  file:
    path: /var/lib/kubernetes
    state: directory
    mode: '0755'
- name: Copy the certificates for Kube API
  copy: 
    src: "{{ item }}" 
    dest: /var/lib/kubernetes/
    remote_src: yes
  with_items:
    - ca.pem
    - ca-key.pem
    - kubernetes-key.pem
    - kubernetes.pem
    - service-account-key.pem 
    - service-account.pem
    - encryption-config.yaml
    - kube-controller-manager.kubeconfig
    - kube-scheduler.kubeconfig
- name: Configure the Kube API configuration file with the local IP
  shell: |
    INTERNAL_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
    cat <<EOF | sudo tee /etc/systemd/system/kube-apiserver.service
    [Unit]
    Description=Kubernetes API Server
    Documentation=https://github.com/kubernetes/kubernetes

    [Service]
    ExecStart=/usr/local/bin/kube-apiserver \
    --advertise-address=${INTERNAL_IP} \
    --allow-privileged=true \
    --apiserver-count=3 \
    --audit-log-maxage=30 \
    --audit-log-maxbackup=3 \
    --audit-log-maxsize=100 \
    --audit-log-path=/var/log/audit.log \
    --authorization-mode=Node,RBAC \
    --bind-address=0.0.0.0 \
    --client-ca-file=/var/lib/kubernetes/ca.pem \
    --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \
    --etcd-cafile=/var/lib/kubernetes/ca.pem \
    --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \
    --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \
    --etcd-servers=https://10.240.0.10:2379,https://10.240.0.11:2379,https://10.240.0.12:2379 \
    --event-ttl=1h \
    --encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml \
    --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \
    --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \
    --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \
    --kubelet-https=true \
    --runtime-config='api/all=true' \
    --service-account-key-file=/var/lib/kubernetes/service-account.pem \
    --service-cluster-ip-range=10.32.0.0/24 \
    --service-node-port-range=30000-32767 \
    --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \
    --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \
    --v=2 
    Restart=on-failure
    RestartSec=5

    [Install]
    WantedBy=multi-user.target
    EOF
- name: Configure the Kube Controller configuration file 
  shell: |
    cat <<EOF | sudo tee /etc/systemd/system/kube-controller-manager.service
    [Unit]
    Description=Kubernetes Controller Manager
    Documentation=https://github.com/kubernetes/kubernetes

    [Service]
    ExecStart=/usr/local/bin/kube-controller-manager \
    --bind-address=0.0.0.0 \
    --cluster-cidr=10.200.0.0/16 \
    --cluster-name=kubernetes \
    --cluster-signing-cert-file=/var/lib/kubernetes/ca.pem \
    --cluster-signing-key-file=/var/lib/kubernetes/ca-key.pem \
    --kubeconfig=/var/lib/kubernetes/kube-controller-manager.kubeconfig \
    --leader-elect=true \
    --root-ca-file=/var/lib/kubernetes/ca.pem \
    --service-account-private-key-file=/var/lib/kubernetes/service-account-key.pem \
    --service-cluster-ip-range=10.32.0.0/24 \
    --use-service-account-credentials=true \
    --v=2
    Restart=on-failure
    RestartSec=5

    [Install]
    WantedBy=multi-user.target
    EOF
- name: Configure the Kube Scheduler configuration file 
  shell: | 
    cat <<EOF | sudo tee /etc/kubernetes/config/kube-scheduler.yaml
    apiVersion: kubescheduler.config.k8s.io/v1alpha1
    kind: KubeSchedulerConfiguration
    clientConnection:
      kubeconfig: "/var/lib/kubernetes/kube-scheduler.kubeconfig"
    leaderElection:
      leaderElect: true
    EOF
    cat <<EOF | sudo tee /etc/systemd/system/kube-scheduler.service
    [Unit]
    Description=Kubernetes Scheduler
    Documentation=https://github.com/kubernetes/kubernetes

    [Service]
    ExecStart=/usr/local/bin/kube-scheduler \
      --config=/etc/kubernetes/config/kube-scheduler.yaml \
      --v=2
    Restart=on-failure
    RestartSec=5

    [Install]
    WantedBy=multi-user.target
    EOF
- name: Enable kube-apiserver
  systemd:
    name: kube-apiserver 
    enabled: yes
    masked: no
- name: Start kube-apiserver
  systemd:
    name: kube-apiserver 
    state: started
- name: Enable kube-controller-manager
  systemd:
    name: kube-controller-manager 
    enabled: yes
    masked: no
- name: Start kube-controller-manager
  systemd:
    name: kube-controller-manager 
    state: started
- name: Enable kube-scheduler
  systemd:
    name: kube-scheduler 
    enabled: yes
    masked: no
- name: Start kube-scheduler
  systemd:
    name: kube-scheduler 
    state: started
# Configure RBAC
- name: Create Role and apply to kubernetes user
  run_once: true
  shell: | 
    cat <<EOF | kubectl apply --kubeconfig admin.kubeconfig -f -
    apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRole
    metadata:
      annotations:
        rbac.authorization.kubernetes.io/autoupdate: "true"
      labels:
        kubernetes.io/bootstrapping: rbac-defaults
      name: system:kube-apiserver-to-kubelet
    rules:
      - apiGroups:
          - ""
        resources:
          - nodes/proxy
          - nodes/stats
          - nodes/log
          - nodes/spec
          - nodes/metrics
        verbs:
          - "*"
    EOF

    cat <<EOF | kubectl apply --kubeconfig admin.kubeconfig -f -
    apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRoleBinding
    metadata:
      name: system:kube-apiserver
      namespace: ""
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: system:kube-apiserver-to-kubelet
    subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: User
        name: kubernetes
    EOF


