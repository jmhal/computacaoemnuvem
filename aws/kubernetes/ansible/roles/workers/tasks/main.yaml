--- 
# Copy the workers certificates
- name: Copy the CA certificate to the workers
  copy: src={{ kube_dir }}/certs/{{ item }} dest=./
  with_items:
    - ca.pem
- name: Copy the worker certificates to the workers
  copy: src={{ kube_dir }}/certs/{{ ansible_hostname }}{{ item }} dest=./
  with_items:
    - -key.pem
    - .pem
# Copy configuration files
- name: Copy kubelet configuration files to the workers
  copy: src={{ kube_dir }}/config/{{ ansible_hostname }}.kubeconfig dest=./
- name: Copy kube-proxy configuration files to the workers
  copy: src={{ kube_dir }}/config/kube-proxy.kubeconfig dest=./
# Install dependencies
- name: Update the cache
  apt:
    update_cache: yes
- name: Install socat
  apt:
    name: socat
- name: Install conntrack
  apt:
    name: conntrack
- name: Install ipset
  apt:
    name: ipset
# Create directories
- name: Create directory /etc/cni/net.d
  file:
    path: /etc/cni/net.d
    state: directory
    mode: '0755'
- name: Create directory /opt/cni/bin
  file:
    path: /opt/cni/bin
    state: directory
    mode: '0755'
- name: Create directory /var/lib/kubelet
  file:
    path: /var/lib/kubelet
    state: directory
    mode: '0755'
- name: Create directory /var/lib/kube-proxy
  file:
    path: /var/lib/kube-proxy
    state: directory
    mode: '0755'
- name: Create directory /var/lib/kubernetes
  file:
    path: /var/lib/kubernetes
    state: directory
    mode: '0755'
- name: Create directory /var/run/kubernetes
  file:
    path: /var/run/kubernetes
    state: directory
    mode: '0755'

# Download the binaries
- name: Download crictl distribution
  unarchive:
    src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.18.0/crictl-v1.18.0-linux-amd64.tar.gz
    dest: /usr/local/bin
    remote_src: yes

- name: Download the runsc binary
  get_url:
    url: https://storage.googleapis.com/kubernetes-the-hard-way/runsc
    dest: "/usr/local/bin"
    force_basic_auth: yes
    mode: u+rwx,g-w+x,o-w+x

- name: Download the runc.amd64 binary
  get_url:
    url: https://github.com/opencontainers/runc/releases/download/v1.0.0-rc91/runc.amd64
    dest: "/usr/local/bin"
    force_basic_auth: yes
    mode: u+rwx,g-w+x,o-w+x
- name: Copy runc.amd64 to runc
  copy: 
    src: /usr/local/bin/runc.amd64
    dest: /usr/local/bin/runc
    remote_src: yes

- name: Download the cni plugins
  unarchive:
    src: https://github.com/containernetworking/plugins/releases/download/v0.8.6/cni-plugins-linux-amd64-v0.8.6.tgz
    dest: "/opt/cni/bin"
    remote_src: yes

- name: Download containerd
  unarchive:
    src: https://github.com/containerd/containerd/releases/download/v1.3.6/containerd-1.3.6-linux-amd64.tar.gz
    dest: "./"
    remote_src: yes
- name: Copy the contained binaries to /bin
  copy: 
    src: bin/{{ item }} 
    dest: /bin
    mode: u+rwx,g-w+x,o-w+x
    remote_src: yes
  with_items:
    - ctr 
    - containerd-shim-runc-v1
    - containerd-stress
    - containerd
    - containerd-shim-runc-v2
    - containerd-shim

- name: Download the kubectl binary
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kubectl
    dest: "/usr/local/bin"
    force_basic_auth: yes
    mode: u+rwx,g-w+x,o-w+x
- name: Download the kube-proxy binary
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kube-proxy
    dest: "/usr/local/bin"
    force_basic_auth: yes
    mode: u+rwx,g-w+x,o-w+x
- name: Download the kubelet binary
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kubelet
    dest: "/usr/local/bin"
    force_basic_auth: yes
    mode: u+rwx,g-w+x,o-w+x
# Create network bridge
- name: Create the bridge
  shell: | 
    HOSTNAME=$(hostname)
    POD_CIDR="192.168.$(echo $HOSTNAME | cut -f 2 -d'-').0/24"
    cat <<EOF | sudo tee /etc/cni/net.d/10-bridge.conf
    {
        "cniVersion": "0.3.1",
        "name": "bridge",
        "type": "bridge",
        "bridge": "cnio0",
        "isGateway": true,
        "ipMasq": true,
        "ipam": {
            "type": "host-local",
            "ranges": [
              [{"subnet": "${POD_CIDR}"}]
            ],
            "routes": [{"dst": "0.0.0.0/0"}]
        }
    }
    EOF
    
    cat <<EOF | sudo tee /etc/cni/net.d/99-loopback.conf
    {
        "cniVersion": "0.3.1",
        "name": "lo",
        "type": "loopback"
    }
    EOF
# Configure containerd
- name: Create directory /etc/containerd
  file:
    path: /etc/containerd
    state: directory
    mode: '0755'
- name: Create the containerd service configuration file
  shell: | 
    cat << EOF | sudo tee /etc/containerd/config.toml
    [plugins]
      [plugins.cri.containerd]
        snapshotter = "overlayfs"
        [plugins.cri.containerd.default_runtime]
          runtime_type = "io.containerd.runtime.v1.linux"
          runtime_engine = "/usr/local/bin/runc"
          runtime_root = ""
        [plugins.cri.containerd.untrusted_workload_runtime]
          runtime_type = "io.containerd.runtime.v1.linux"
          runtime_engine = "/usr/local/bin/runsc"
          runtime_root = "/run/containerd/runsc"
    EOF
    cat <<EOF | sudo tee /etc/systemd/system/containerd.service
    [Unit]
    Description=containerd container runtime
    Documentation=https://containerd.io
    After=network.target
    
    [Service]
    ExecStartPre=/sbin/modprobe overlay
    ExecStart=/bin/containerd
    Restart=always
    RestartSec=5
    Delegate=yes
    KillMode=process
    OOMScoreAdjust=-999
    LimitNOFILE=1048576
    LimitNPROC=infinity
    LimitCORE=infinity
    
    [Install]
    WantedBy=multi-user.target
    EOF
# Configure Kubelet
- name: Copy kubelet configuration files to the folder
  copy: 
    src: "{{ ansible_hostname }}.kubeconfig" 
    dest: /var/lib/kubelet/kubeconfig
    remote_src: true
- name: Copy worker key and certificate to the folder
  copy: 
    src: "{{ ansible_hostname }}{{ item }}" 
    dest: /var/lib/kubelet/
    remote_src: true
  with_items:
    - -key.pem
    - .pem 
- name: Copy ca certificate to the /var/lib/kubelet folder
  copy: 
    src: ca.pem 
    dest: /var/lib/kubelet/
    remote_src: true
- name: Copy ca certificate to the /var/lib/kubernetes folder
  copy: 
    src: ca.pem 
    dest: /var/lib/kubernetes
    remote_src: true
- name: Create kubelet service configuration files 
  shell: |
    HOSTNAME=$(hostname) 
    POD_CIDR="192.168.$(echo $HOSTNAME | cut -f 2 -d'-').0/24"
    cat <<EOF | sudo tee /var/lib/kubelet/kubelet-config.yaml
    kind: KubeletConfiguration
    apiVersion: kubelet.config.k8s.io/v1beta1
    authentication:
      anonymous:
        enabled: false
      webhook:
        enabled: true
      x509:
        clientCAFile: "/var/lib/kubernetes/ca.pem"
    authorization:
      mode: Webhook
    clusterDomain: "cluster.local"
    clusterDNS:
      - "10.32.0.10"
    podCIDR: "${POD_CIDR}"
    resolvConf: "/run/systemd/resolve/resolv.conf"
    runtimeRequestTimeout: "15m"
    tlsCertFile: "/var/lib/kubelet/${HOSTNAME}.pem"
    tlsPrivateKeyFile: "/var/lib/kubelet/${HOSTNAME}-key.pem"
    EOF
    
    cat <<EOF | sudo tee /etc/systemd/system/kubelet.service
    [Unit]
    Description=Kubernetes Kubelet
    Documentation=https://github.com/kubernetes/kubernetes
    After=containerd.service
    Requires=containerd.service
    
    [Service]
    ExecStart=/usr/local/bin/kubelet \\
      --config=/var/lib/kubelet/kubelet-config.yaml \\
      --container-runtime=remote \\
      --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \\
      --image-pull-progress-deadline=2m \\
      --kubeconfig=/var/lib/kubelet/kubeconfig \\
      --network-plugin=cni \\
      --register-node=true \\
      --v=2
    Restart=on-failure
    RestartSec=5
    
    [Install]
    WantedBy=multi-user.target
    EOF

# Configure Kube Proxy
- name: Copy kubelet configuration files to the folder
  copy: 
    src: kube-proxy.kubeconfig 
    dest: /var/lib/kube-proxy/kubeconfig
    remote_src: true
- name: Create kube proxy service configuration files 
  shell: |
    cat <<EOF | sudo tee /var/lib/kube-proxy/kube-proxy-config.yaml
    kind: KubeProxyConfiguration
    apiVersion: kubeproxy.config.k8s.io/v1alpha1
    clientConnection:
      kubeconfig: "/var/lib/kube-proxy/kubeconfig"
    mode: "iptables"
    clusterCIDR: "10.200.0.0/16"
    EOF
    
    cat <<EOF | sudo tee /etc/systemd/system/kube-proxy.service
    [Unit]
    Description=Kubernetes Kube Proxy
    Documentation=https://github.com/kubernetes/kubernetes
    
    [Service]
    ExecStart=/usr/local/bin/kube-proxy \\
      --config=/var/lib/kube-proxy/kube-proxy-config.yaml
    Restart=on-failure
    RestartSec=5
    
    [Install]
    WantedBy=multi-user.target
    EOF

  # Start the Services
- name: Reload the daemons configuration files
  systemd:
    daemon_reload: yes
- name: Enable containerd  
  systemd:
    name: containerd 
    enabled: yes
    masked: no
- name: Enable kubelet  
  systemd:
    name: kubelet 
    enabled: yes
    masked: no
- name: Enable kube-proxy
  systemd:
    name: kube-proxy
    enabled: yes
    masked: no
- name: Start containerd  
  systemd:
    name: containerd 
    state: started
- name: Start kubelet  
  systemd:
    name: kubelet 
    state: started
- name: Start kube-proxy
  systemd:
    name: kube-proxy
    state: started